{"version":3,"sources":["dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["onSceneReady","scene","mesh","camera","ArcRotateCamera","Vector3","Zero","canvas","getEngine","getRenderingCanvas","attachControl","HemisphericLight","intensity","testMat","StandardMaterial","diffuseColor","Color3","Blue","testMat_2","Green","assetsManager","AssetsManager","advancedTexture","AdvancedDynamicTexture","CreateFullscreenUI","SceneLoader","ImportMesh","newMeshes","target","button_one","Button","CreateSimpleButton","width","height","color","background","top","onPointerClickObservable","add","state","dispose","i","length","material","addControl","button_two","load","onRender","antialias","className","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAUMA,G,OAAe,SAAAC,GACnB,IAAIC,EAEAC,EAAS,IAAIC,IAAgB,SAAU,EAAG,GAAK,IAAKC,IAAQC,OAAQL,GAGlEM,EAASN,EAAMO,YAAYC,qBAGjCN,EAAOO,cAAcH,GAAQ,GAIjB,IAAII,IAAiB,QAAS,IAAIN,IAAQ,EAAG,EAAG,GAAIJ,GAG1DW,UAAY,GAGlB,IAAIC,EAAU,IAAIC,IAAiB,GAAIb,GACvCY,EAAQE,aAAe,IAAIC,IAAOC,KAClC,IAAIC,EAAY,IAAIJ,IAAiB,GAAIb,GACzCiB,EAAUH,aAAe,IAAIC,IAAOG,MAEpC,IAAIC,EAAgB,IAAIC,IAAcpB,GAElCqB,EAAkBC,IAAuBC,mBAAmB,MAIxDC,IAAYC,WAAW,GAAG,uBAAuB,aAAczB,GAAO,SAAU0B,GACtFzB,EAAOyB,EAAU,GACjBxB,EAAOyB,OAAS1B,KAIlB,IAAI2B,EAAaC,IAAOC,mBAAmB,UAAW,SACtDF,EAAWG,MAAQ,GACnBH,EAAWI,OAAS,OACpBJ,EAAWK,MAAQ,QACnBL,EAAWM,WAAa,QACxBN,EAAWO,IAAM,QACjBP,EAAWQ,yBAAyBC,KAAI,SAASC,GAC3CA,IACFrC,EAAKsC,UACGf,IAAYC,WAAW,GAAG,uBAAuB,aAAczB,GAAO,SAAU0B,GACtF,IAAI,IAAIc,EAAE,EAAEA,EAAEd,EAAUe,OAAOD,IAC7Bd,EAAUc,GAAGE,SAAWzB,EAE1BhB,EAAOyB,EAAU,GACjBxB,EAAOyB,OAAS1B,SAKtBoB,EAAgBsB,WAAWf,GAG3B,IAAIgB,EAAaf,IAAOC,mBAAmB,UAAW,QACtDc,EAAWb,MAAQ,GACnBa,EAAWZ,OAAS,OACpBY,EAAWX,MAAQ,QACnBW,EAAWV,WAAa,OACxBU,EAAWT,IAAM,QACjBS,EAAWR,yBAAyBC,KAAI,SAASC,GAC3CA,IACFrC,EAAKsC,UACGf,IAAYC,WAAW,GAAG,uBAAuB,aAAczB,GAAO,SAAU0B,GACtF,IAAI,IAAIc,EAAE,EAAEA,EAAEd,EAAUe,OAAOD,IAC7Bd,EAAUc,GAAGE,SAAW9B,EAE1BX,EAAOyB,EAAU,GACjBxB,EAAOyB,OAAS1B,SAKtBoB,EAAgBsB,WAAWC,GAE5BzB,EAAc0B,SAITC,EAAW,SAAA9C,KAEF,oBACX,6BACE,kBAAC,IAAD,CAAgB+C,WAAS,EAAChD,aAAcA,EAAc+C,SAAUA,EAAUE,UAAU,eAAeC,GAAG,gBCrF7FC,MATf,WACE,OAEE,6BACA,kBAAC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f9ffba6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Vector3, HemisphericLight, SceneLoader, ArcRotateCamera, AssetsManager,Color3,StandardMaterial } from '@babylonjs/core';\r\nimport \"@babylonjs/loaders/glTF\"\r\nimport {Button,AdvancedDynamicTexture} from \"@babylonjs/gui\"\r\nimport SceneComponent from 'babylonjs-hook'; // ^^ point to file we created above or 'babylonjs-hook' NPM.\r\nimport './App.css'\r\n\r\n\r\nlet modal;\r\n\r\nconst onSceneReady = scene => {\r\n  var mesh;\r\n  // This creates a camera and position it\r\n  var camera = new ArcRotateCamera(\"Camera\", 0, 0.8, 300, Vector3.Zero(), scene);\r\n \r\n  // This creates a canvas\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n\r\n  // This attaches the camera to the canvas\r\n  camera.attachControl(canvas, true);\r\n\r\n\r\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n\r\n  // Default intensity is 1. Let's dim the light a small amount\r\n  light.intensity = 0.7;\r\n\r\n  // Creating material colors to change color of textures\r\n  var testMat = new StandardMaterial(\"\", scene);\r\n  testMat.diffuseColor = new Color3.Blue();\r\n  var testMat_2 = new StandardMaterial(\"\", scene);\r\n  testMat_2.diffuseColor = new Color3.Green();\r\n        \r\n  var assetsManager = new AssetsManager(scene);\r\n  \r\n  var advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n\r\n  // Uploading gltf file\r\n  modal = SceneLoader.ImportMesh(\"\",\"scenes/office_chair/\",\"scene.gltf\" ,scene, function (newMeshes) {\r\n    mesh = newMeshes[0]\r\n    camera.target = mesh;\r\n  })\r\n\r\n  // Button creation and add functionality to change color\r\n  var button_one = Button.CreateSimpleButton(\"but_one\", \"Green\");\r\n  button_one.width = 0.2;\r\n  button_one.height = \"40px\";\r\n  button_one.color = \"white\";\r\n  button_one.background = \"green\";\r\n  button_one.top = \"100px\";\r\n  button_one.onPointerClickObservable.add(function(state) {\r\n    if (state) {\r\n      mesh.dispose();\r\n      modal = SceneLoader.ImportMesh(\"\",\"scenes/office_chair/\",\"scene.gltf\" ,scene, function (newMeshes) {\r\n        for(var i=0;i<newMeshes.length;i++){\r\n          newMeshes[i].material = testMat_2;\r\n        }\r\n        mesh = newMeshes[0]\r\n        camera.target = mesh;\r\n      })  \r\n    }\r\n  }); \r\n\r\n  advancedTexture.addControl(button_one);\r\n\r\n  // Same with first one, only difference is color and position\r\n  var button_two = Button.CreateSimpleButton(\"but_two\", \"Blue\");\r\n  button_two.width = 0.2;\r\n  button_two.height = \"40px\";\r\n  button_two.color = \"white\";\r\n  button_two.background = \"blue\";\r\n  button_two.top = \"150px\";\r\n  button_two.onPointerClickObservable.add(function(state) {\r\n    if (state) {\r\n      mesh.dispose();\r\n      modal = SceneLoader.ImportMesh(\"\",\"scenes/office_chair/\",\"scene.gltf\" ,scene, function (newMeshes) {\r\n        for(var i=0;i<newMeshes.length;i++){\r\n          newMeshes[i].material = testMat;\r\n        }\r\n        mesh = newMeshes[0]\r\n        camera.target = mesh;\r\n      })  \r\n    }\r\n  }); \r\n\r\n  advancedTexture.addControl(button_two);\r\n\t\r\n\tassetsManager.load();\r\n  \r\n}\r\n\r\nconst onRender = scene => {}\r\n\r\nexport default () => (\r\n    <div>\r\n      <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} className=\"canvas-style\" id='my-canvas'/>\r\n    </div>\r\n)","import React from 'react';\nimport Dashboard from './dashboard.jsx';\n\nfunction App() {\n  return (\n    \n    <div>\n    <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}