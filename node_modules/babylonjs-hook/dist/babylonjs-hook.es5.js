import { Engine, Scene } from '@babylonjs/core';
import React, { useRef, useState, useEffect } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var babylonjsHook = (function (props) {
    var reactCanvas = useRef(null);
    var antialias = props.antialias, engineOptions = props.engineOptions, adaptToDeviceRatio = props.adaptToDeviceRatio, sceneOptions = props.sceneOptions, onRender = props.onRender, onSceneReady = props.onSceneReady, rest = __rest(props, ["antialias", "engineOptions", "adaptToDeviceRatio", "sceneOptions", "onRender", "onSceneReady"]);
    var _a = useState(false), loaded = _a[0], setLoaded = _a[1];
    var _b = useState(null), scene = _b[0], setScene = _b[1];
    useEffect(function () {
        if (window) {
            var resize_1 = function () {
                if (scene) {
                    scene.getEngine().resize();
                }
            };
            window.addEventListener('resize', resize_1);
            return function () {
                window.removeEventListener('resize', resize_1);
            };
        }
    }, []);
    useEffect(function () {
        if (!loaded) {
            setLoaded(true);
            var engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);
            var scene_1 = new Scene(engine, sceneOptions);
            setScene(scene_1);
            if (scene_1.isReady()) {
                props.onSceneReady(scene_1);
            }
            else {
                scene_1.onReadyObservable.addOnce(function (scene) { return props.onSceneReady(scene); });
            }
            engine.runRenderLoop(function () {
                if (typeof onRender === 'function') {
                    onRender(scene_1);
                }
                scene_1.render();
            });
        }
        return function () {
            if (scene !== null) {
                scene.dispose();
            }
        };
    }, [reactCanvas]);
    return (React.createElement("canvas", __assign({ ref: reactCanvas }, rest)));
});

export default babylonjsHook;
//# sourceMappingURL=babylonjs-hook.es5.js.map
