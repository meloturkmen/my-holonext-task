"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@babylonjs/core");
var react_1 = require("react");
exports.default = (function (props) {
    var reactCanvas = react_1.useRef(null);
    var antialias = props.antialias, engineOptions = props.engineOptions, adaptToDeviceRatio = props.adaptToDeviceRatio, sceneOptions = props.sceneOptions, onRender = props.onRender, onSceneReady = props.onSceneReady, rest = __rest(props, ["antialias", "engineOptions", "adaptToDeviceRatio", "sceneOptions", "onRender", "onSceneReady"]);
    var _a = react_1.useState(false), loaded = _a[0], setLoaded = _a[1];
    var _b = react_1.useState(null), scene = _b[0], setScene = _b[1];
    react_1.useEffect(function () {
        if (window) {
            var resize_1 = function () {
                if (scene) {
                    scene.getEngine().resize();
                }
            };
            window.addEventListener('resize', resize_1);
            return function () {
                window.removeEventListener('resize', resize_1);
            };
        }
    }, []);
    react_1.useEffect(function () {
        if (!loaded) {
            setLoaded(true);
            var engine = new core_1.Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);
            var scene_1 = new core_1.Scene(engine, sceneOptions);
            setScene(scene_1);
            if (scene_1.isReady()) {
                props.onSceneReady(scene_1);
            }
            else {
                scene_1.onReadyObservable.addOnce(function (scene) { return props.onSceneReady(scene); });
            }
            engine.runRenderLoop(function () {
                if (typeof onRender === 'function') {
                    onRender(scene_1);
                }
                scene_1.render();
            });
        }
        return function () {
            if (scene !== null) {
                scene.dispose();
            }
        };
    }, [reactCanvas]);
    return (react_1.default.createElement("canvas", __assign({ ref: reactCanvas }, rest)));
});
//# sourceMappingURL=babylonjs-hook.js.map